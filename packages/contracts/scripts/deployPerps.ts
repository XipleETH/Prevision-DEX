import { ethers, network } from 'hardhat'
import * as dotenv from 'dotenv'
import fs from 'fs'
import path from 'path'

dotenv.config()

async function main() {
  const [deployer] = await ethers.getSigners()
  const oracleAddr = process.env.ORACLE
  if (!oracleAddr) throw new Error('Set ORACLE in .env to existing BTCDOracle')

  console.log('Deployer', deployer.address)
  console.log('Using Oracle', oracleAddr)

  const Perps = await ethers.getContractFactory('BTCDPerps')
  // Let provider estimate fees to avoid underpriced replacement errors
  const perps = await Perps.deploy(oracleAddr)
  await perps.waitForDeployment()
  const perpsAddr = await perps.getAddress()
  console.log('Perps:', perpsAddr)

  // persist addresses similar to deploy.ts
  try {
    const dir = path.join(process.cwd())
    const jsonPath = path.join(dir, `addresses.${network.name}.json`)
    let current: any = {}
    try {
      if (fs.existsSync(jsonPath)) {
        current = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'))
      }
    } catch {}
    const out = {
      ...current,
      network: network.name,
      oracle: process.env.ORACLE,
      perps: perpsAddr,
      deployer: deployer.address,
      timestamp: Date.now(),
    }
    fs.writeFileSync(jsonPath, JSON.stringify(out, null, 2))
    console.log('Saved addresses to:', jsonPath)

    // Also write frontend addresses.ts
    try {
      const frontendAddrPath = path.join(dir, '..', 'frontend', 'src', 'addresses.ts')
      const content = `// auto-generated by deployPerps.ts\nexport const deployed = {\n  baseSepolia: { oracle: '${out.oracle}', perps: '${out.perps}' },\n  base: { oracle: '', perps: '' }\n} as const;\n`
      fs.writeFileSync(frontendAddrPath, content)
      console.log('Also wrote frontend addresses to:', frontendAddrPath)
    } catch (e) {
      console.warn('Could not write frontend addresses.ts:', e)
    }
  } catch (e) {
    console.warn('Address persistence skipped due to error:', e)
  }
}

main().catch((e)=>{ console.error(e); process.exit(1) })
