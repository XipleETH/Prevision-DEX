import { ethers, network } from "hardhat";
import fs from "fs";
import path from "path";

async function main() {
  const [deployer] = await ethers.getSigners();
  console.log("Deploying with:", deployer.address);

  const Oracle = await ethers.getContractFactory("BTCDOracle");
  const oracle = await Oracle.deploy(deployer.address);
  await oracle.waitForDeployment();
  console.log("Oracle:", await oracle.getAddress());

  const Perps = await ethers.getContractFactory("BTCDPerps");
  const perps = await Perps.deploy(await oracle.getAddress());
  await perps.waitForDeployment();
  console.log("Perps:", await perps.getAddress());

  // grant deployer as updater for testing
  const tx = await oracle.setUpdater(deployer.address, true);
  await tx.wait();
  console.log("Updater set");

  // persist addresses
  const out = {
    network: network.name,
    oracle: await oracle.getAddress(),
    perps: await perps.getAddress(),
    deployer: deployer.address,
    timestamp: Date.now()
  };
  const dir = path.join(process.cwd());
  const jsonPath = path.join(dir, `addresses.${network.name}.json`);
  fs.writeFileSync(jsonPath, JSON.stringify(out, null, 2));
  const envSnippet = `ORACLE=${out.oracle}\nPERPS=${out.perps}\n`;
  fs.writeFileSync(path.join(dir, ".env.copilot"), envSnippet);
  console.log("Saved addresses to:", jsonPath, "and .env.copilot");

  try {
    const frontendAddrPath = path.join(dir, "..", "frontend", "src", "addresses.ts");
    const content = `// auto-generated by deploy.ts\nexport const deployed = {\n  baseSepolia: { oracle: '${out.oracle}', perps: '${out.perps}' },\n  base: { oracle: '', perps: '' }\n} as const;\n`;
    fs.writeFileSync(frontendAddrPath, content);
    console.log("Also wrote frontend addresses to:", frontendAddrPath);
  } catch (e) {
    console.warn("Could not write frontend addresses.ts:", e);
  }
}

main().catch((e) => { console.error(e); process.exit(1); });
